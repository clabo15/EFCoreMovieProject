using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using EFCoreMovies_Demo_2.DTOs;
using EFCoreMovies_Demo_2.Entities;
using EFCoreMovies_Demo_2.Utilities;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace EFCoreMovies_Demo_2.Controllers;

[ApiController]
[Route("api/actors")]
public class ActorsController : ControllerBase
{
    private readonly ApplicationDbContext _context;
    private readonly IMapper _mapper;

    public ActorsController(ApplicationDbContext context, IMapper mapper)
    {
        _context = context;
        _mapper = mapper;
    }

    // Get from the actors table using a ActorDTO and paging
    [HttpGet]
    public async Task<IEnumerable<ActorDTO>> Get(int page, int recordsToTake)
    {
        return await _context.Actors.AsNoTracking()
            .OrderBy(a => a.Name)
            .Select(a => new ActorDTO{Id =a.Id, Name = a.Name, DateOfBirth = a.DateOfBirth})
            .Paginate(page, recordsToTake)
            .ToListAsync();
    }

    // Return all Actor Ids
    [HttpGet("ids")]
    public async Task<IEnumerable<Guid>> GetIds()
    {
        return await _context.Actors.Select(a => a.Id).ToListAsync();
    }

    // Get from the actors table using a ActorDTO and paging and automapper
    [HttpGet("get-2")]
    public async Task<IEnumerable<ActorDTO>> GetUsingAuttoMapper(int page, int recordsToTake)
    {
        return await _context.Actors.AsNoTracking()
            .OrderBy(a => a.Name)
            .ProjectTo<ActorDTO>(_mapper.ConfigurationProvider)
            .Paginate(page, recordsToTake)
            .ToListAsync();
    }

    [HttpGet("pagingTest")]
    public async Task<ActionResult<PaginatedList<ActorDTO>>> GetPagingTest(int pageNumber = 1)
    {
        
        var test = await PaginatedList<ActorDTO>.CreateAsync(_context.Actors
            .ProjectTo<ActorDTO>(_mapper.ConfigurationProvider), pageNumber, 5);
        if (test.PageIndex > test.TotalPages)
        {
            test.NextPage = false;
            return NotFound();
        }
        return test;

    }

    [HttpPost]
    public async Task<ActionResult> Post(ActorCreationDTO actorCreationDTO)
    {
        var actor = _mapper.Map<Actor>(actorCreationDTO);
        _context.Add(actor);
        await _context.SaveChangesAsync();
        return Ok();
    }

    // Update Actor with connected model
    [HttpPut("{id:Guid}")]
    public async Task<ActionResult> Put(ActorCreationDTO actorCreationDto, Guid id)
    {
        var actorDB = await _context.Actors.FirstOrDefaultAsync(p => p.Id == id);

        if (actorDB is null)
        {
            return NotFound();
        }

        actorDB = _mapper.Map(actorCreationDto, actorDB);
        await _context.SaveChangesAsync();
        return Ok();
    }

    // Update Actor with disconnected model
    // The entity itself gets marked as changed so even the Name will be listed in the update and in the sql generated by EF
    [HttpPut("disconnected/{id:guid}")]
    public async Task<ActionResult> PutDisconnected(ActorCreationDTO actorCreationDto, Guid id)
    {
        var existsActor = await _context.Actors.AnyAsync(p => p.Id == id);

        if (!existsActor)
        {
            return NotFound();
        }

        var actor = _mapper.Map<Actor>(actorCreationDto);
        actor.Id = id;

        _context.Update(actor);
        await _context.SaveChangesAsync();
        return Ok();
    }
}