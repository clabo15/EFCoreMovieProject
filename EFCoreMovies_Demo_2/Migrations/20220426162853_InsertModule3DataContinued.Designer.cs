// <auto-generated />
using System;
using EFCoreMovies_Demo_2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EFCoreMovies_Demo_2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220426162853_InsertModule3DataContinued")]
    partial class InsertModule3DataContinued
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasMaxLength(10485760)
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fcc7d4ee-1fd3-4314-a0c4-6519a03eb394"),
                            Biography = "Thomas Stanley Holland (born 1 June 1996) is an English actor. He is recipient of several accolades, including the 2017 BAFTA Rising Star Award. Holland began his acting career as a child actor on the West End stage in Billy Elliot the Musical at the Victoria Palace Theatre in 2008, playing a supporting part",
                            DateOfBirth = new DateTime(1996, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tom Holland"
                        },
                        new
                        {
                            Id = new Guid("5b12acb1-da6d-40f4-8112-dc60a26c2190"),
                            Biography = "Samuel Leroy Jackson (born December 21, 1948) is an American actor and producer. One of the most widely recognized actors of his generation, the films in which he has appeared have collectively grossed over $27 billion worldwide, making him the highest-grossing actor of all time (excluding cameo appearances and voice roles).",
                            DateOfBirth = new DateTime(1948, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samuel L. Jackson"
                        },
                        new
                        {
                            Id = new Guid("9f9ab47b-c7ea-42da-a6a9-a74117335030"),
                            Biography = "Robert John Downey Jr. (born April 4, 1965) is an American actor and producer. His career has been characterized by critical and popular success in his youth, followed by a period of substance abuse and legal troubles, before a resurgence of commercial success later in his career.",
                            DateOfBirth = new DateTime(1965, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Robert Downey Jr."
                        },
                        new
                        {
                            Id = new Guid("8bb17c8b-6daf-409c-bd1b-cea29960152f"),
                            DateOfBirth = new DateTime(1981, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chris Evans"
                        },
                        new
                        {
                            Id = new Guid("9a00bd47-be1e-40ae-ba33-fa1022672eee"),
                            DateOfBirth = new DateTime(1972, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dwayne Johnson"
                        },
                        new
                        {
                            Id = new Guid("78787d39-3e76-4c00-b2ba-09e565abc68e"),
                            DateOfBirth = new DateTime(2000, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auli'i Cravalho"
                        },
                        new
                        {
                            Id = new Guid("db650382-7e89-4370-a68b-32b1547e76e4"),
                            DateOfBirth = new DateTime(1984, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Scarlett Johansson"
                        },
                        new
                        {
                            Id = new Guid("0bda6131-7ff7-48d8-80ac-b68a9cb5aa22"),
                            DateOfBirth = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Keanu Reeves"
                        });
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.Cinema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Cinemas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11050110-9e19-47e4-a5c4-648ee2d11e2d"),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.9388777 18.4839233)"),
                            Name = "Agora Mall"
                        },
                        new
                        {
                            Id = new Guid("5631e3e8-17d8-4792-8465-c3a9dd8cd419"),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.911582 18.482455)"),
                            Name = "Sambil"
                        },
                        new
                        {
                            Id = new Guid("bbef8cd5-3b7b-4351-89b5-da3cc5ae70de"),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.856309 18.506662)"),
                            Name = "Megacentro"
                        },
                        new
                        {
                            Id = new Guid("44e8898a-3baa-45f5-9848-77eefb592cbc"),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.939248 18.469649)"),
                            Name = "Acropolis"
                        });
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.CinemaHall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CinemaHallType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("CinemaId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.ToTable("CinemaHalls");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c46b128-28eb-41cc-aa61-cffe16de6323"),
                            CinemaHallType = 1,
                            CinemaId = new Guid("bbef8cd5-3b7b-4351-89b5-da3cc5ae70de"),
                            Cost = 250m
                        },
                        new
                        {
                            Id = new Guid("5f373a94-ef2d-4ae6-9a90-5500bd7e3e0f"),
                            CinemaHallType = 2,
                            CinemaId = new Guid("bbef8cd5-3b7b-4351-89b5-da3cc5ae70de"),
                            Cost = 330m
                        },
                        new
                        {
                            Id = new Guid("25d2aaa5-9972-41b8-a270-2bd68f025004"),
                            CinemaHallType = 3,
                            CinemaId = new Guid("bbef8cd5-3b7b-4351-89b5-da3cc5ae70de"),
                            Cost = 450m
                        },
                        new
                        {
                            Id = new Guid("c8c230c7-a254-418b-9b6f-a56ea3d603a2"),
                            CinemaHallType = 1,
                            CinemaId = new Guid("44e8898a-3baa-45f5-9848-77eefb592cbc"),
                            Cost = 250m
                        },
                        new
                        {
                            Id = new Guid("732bf925-406c-4da7-a0f0-3c59cb29b3e5"),
                            CinemaHallType = 1,
                            CinemaId = new Guid("11050110-9e19-47e4-a5c4-648ee2d11e2d"),
                            Cost = 220m
                        },
                        new
                        {
                            Id = new Guid("7c94e70b-7592-4abd-8fa7-691cf6e4e321"),
                            CinemaHallType = 2,
                            CinemaId = new Guid("11050110-9e19-47e4-a5c4-648ee2d11e2d"),
                            Cost = 320m
                        },
                        new
                        {
                            Id = new Guid("2e32ab6e-4d73-40bd-afb3-02f35010ad08"),
                            CinemaHallType = 1,
                            CinemaId = new Guid("5631e3e8-17d8-4792-8465-c3a9dd8cd419"),
                            Cost = 200m
                        },
                        new
                        {
                            Id = new Guid("76e0328f-8b98-4725-92c8-8d43fc1ac124"),
                            CinemaHallType = 2,
                            CinemaId = new Guid("5631e3e8-17d8-4792-8465-c3a9dd8cd419"),
                            Cost = 290m
                        });
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.CinemaHallMovie", b =>
                {
                    b.Property<Guid>("CinemaHallId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.HasKey("CinemaHallId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("CinemaHallMovies");
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.CinemaOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Begin")
                        .HasColumnType("date");

                    b.Property<Guid>("CinemaId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime>("End")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId")
                        .IsUnique();

                    b.ToTable("CinemasOffers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b9381ce-4090-42e1-a4cf-eb3fb0f749f9"),
                            Begin = new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CinemaId = new Guid("44e8898a-3baa-45f5-9848-77eefb592cbc"),
                            DiscountPercentage = 15m,
                            End = new DateTime(2022, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0367a614-e1e1-4d66-be6f-ae49b4808a15"),
                            Begin = new DateTime(2022, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CinemaId = new Guid("11050110-9e19-47e4-a5c4-648ee2d11e2d"),
                            DiscountPercentage = 10m,
                            End = new DateTime(2022, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f6a2004-828d-4672-b6f6-191fa912ef61"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("6fbeadf1-e817-43b0-9a1a-8bf4541b819d"),
                            Name = "Animation"
                        },
                        new
                        {
                            Id = new Guid("3dbc58eb-9ecd-4463-83fb-969558cacb60"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("cd61ff22-0e1d-4e6d-a1c3-77d294c0394f"),
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = new Guid("c3c7462e-77e9-49b5-8002-e9155ebd36da"),
                            Name = "Drama"
                        });
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.GenreMovie", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GenreMovies");
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("InCinemas")
                        .HasColumnType("boolean");

                    b.Property<string>("PosterURL")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7adf1c01-f6f9-4768-a258-7c3162dda432"),
                            InCinemas = false,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/8/8a/The_Avengers_%282012_film%29_poster.jpg",
                            ReleaseDate = new DateTime(2012, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Avengers"
                        },
                        new
                        {
                            Id = new Guid("06caa6de-e86a-4d33-83af-1e6501650fb6"),
                            InCinemas = false,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/9/98/Coco_%282017_film%29_poster.jpg",
                            ReleaseDate = new DateTime(2017, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Coco"
                        },
                        new
                        {
                            Id = new Guid("340733b7-9d5b-4235-bb4f-4f040a53fa6c"),
                            InCinemas = false,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/0/00/Spider-Man_No_Way_Home_poster.jpg",
                            ReleaseDate = new DateTime(2022, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spider-Man: No way home"
                        },
                        new
                        {
                            Id = new Guid("9842b461-ac1e-4553-898b-bcb4bb0eddb7"),
                            InCinemas = false,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/0/00/Spider-Man_No_Way_Home_poster.jpg",
                            ReleaseDate = new DateTime(2019, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spider-Man: Far From Home"
                        },
                        new
                        {
                            Id = new Guid("f3d18550-7488-44b7-be01-256662c285c4"),
                            InCinemas = true,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/5/50/The_Matrix_Resurrections.jpg",
                            ReleaseDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Matrix Resurrections"
                        });
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.MovieActor", b =>
                {
                    b.Property<Guid>("ActorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<string>("Character")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MoviesActors");

                    b.HasData(
                        new
                        {
                            ActorId = new Guid("5b12acb1-da6d-40f4-8112-dc60a26c2190"),
                            MovieId = new Guid("9842b461-ac1e-4553-898b-bcb4bb0eddb7"),
                            Character = "Samuel L. Jackson",
                            Order = 2
                        },
                        new
                        {
                            ActorId = new Guid("fcc7d4ee-1fd3-4314-a0c4-6519a03eb394"),
                            MovieId = new Guid("9842b461-ac1e-4553-898b-bcb4bb0eddb7"),
                            Character = "Peter Parker",
                            Order = 1
                        },
                        new
                        {
                            ActorId = new Guid("fcc7d4ee-1fd3-4314-a0c4-6519a03eb394"),
                            MovieId = new Guid("340733b7-9d5b-4235-bb4f-4f040a53fa6c"),
                            Character = "Peter Parker",
                            Order = 1
                        },
                        new
                        {
                            ActorId = new Guid("9f9ab47b-c7ea-42da-a6a9-a74117335030"),
                            MovieId = new Guid("7adf1c01-f6f9-4768-a258-7c3162dda432"),
                            Character = "Iron Man",
                            Order = 2
                        },
                        new
                        {
                            ActorId = new Guid("db650382-7e89-4370-a68b-32b1547e76e4"),
                            MovieId = new Guid("7adf1c01-f6f9-4768-a258-7c3162dda432"),
                            Character = "Black Widow",
                            Order = 3
                        },
                        new
                        {
                            ActorId = new Guid("8bb17c8b-6daf-409c-bd1b-cea29960152f"),
                            MovieId = new Guid("7adf1c01-f6f9-4768-a258-7c3162dda432"),
                            Character = "Capitán América",
                            Order = 1
                        },
                        new
                        {
                            ActorId = new Guid("0bda6131-7ff7-48d8-80ac-b68a9cb5aa22"),
                            MovieId = new Guid("f3d18550-7488-44b7-be01-256662c285c4"),
                            Character = "Neo",
                            Order = 1
                        });
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.CinemaHall", b =>
                {
                    b.HasOne("EFCoreMovies_Demo_2.Entities.Cinema", "Cinema")
                        .WithMany("CinemaHalls")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.CinemaHallMovie", b =>
                {
                    b.HasOne("EFCoreMovies_Demo_2.Entities.CinemaHall", "CinemaHall")
                        .WithMany("CinemaHallMovies")
                        .HasForeignKey("CinemaHallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreMovies_Demo_2.Entities.Movie", "Movie")
                        .WithMany("CinemaHallMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CinemaHall");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.CinemaOffer", b =>
                {
                    b.HasOne("EFCoreMovies_Demo_2.Entities.Cinema", null)
                        .WithOne("CinemaOffer")
                        .HasForeignKey("EFCoreMovies_Demo_2.Entities.CinemaOffer", "CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.GenreMovie", b =>
                {
                    b.HasOne("EFCoreMovies_Demo_2.Entities.Genre", "Genre")
                        .WithMany("GenreMovies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreMovies_Demo_2.Entities.Movie", "Movie")
                        .WithMany("GenreMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.MovieActor", b =>
                {
                    b.HasOne("EFCoreMovies_Demo_2.Entities.Actor", "Actor")
                        .WithMany("MoviesActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreMovies_Demo_2.Entities.Movie", "Movie")
                        .WithMany("MoviesActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.Actor", b =>
                {
                    b.Navigation("MoviesActors");
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.Cinema", b =>
                {
                    b.Navigation("CinemaHalls");

                    b.Navigation("CinemaOffer");
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.CinemaHall", b =>
                {
                    b.Navigation("CinemaHallMovies");
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.Genre", b =>
                {
                    b.Navigation("GenreMovies");
                });

            modelBuilder.Entity("EFCoreMovies_Demo_2.Entities.Movie", b =>
                {
                    b.Navigation("CinemaHallMovies");

                    b.Navigation("GenreMovies");

                    b.Navigation("MoviesActors");
                });
#pragma warning restore 612, 618
        }
    }
}
